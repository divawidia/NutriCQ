<?php

namespace Tests\Feature;

use App\Models\Booking;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Laravel\Sanctum\Sanctum;
use Spatie\Permission\Models\Role;
use Tests\TestCase;

class BookingTest extends TestCase
{
    use RefreshDatabase;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $role2 = Role::create(['name' => 'user']);
        $role3 = Role::create(['name' => 'doctor']);

        $this->userUser = User::factory()->create();
        $this->userUser->assignRole($role2);

        Sanctum::actingAs(
            $this->userUser,
            ['*']
        );

        $this->userDoctor = User::factory()->create();
        $this->userDoctor->assignRole($role3);
    }

    public function test_get_mybooking()
    {
        $response = $this->get('/api/mybooking');
        $response->assertStatus(200);
    }

    public function test_booking_store()
    {
        $booking = Booking::factory()->make([
            'user_id' => $this->userUser->id,
            'nama_user' => $this->userUser->name,
            'tanggal' => '2022-12-12',
            'deskripsi' => 'test case',
            'start_time' => '10:10:10',
            'end_time' => '10:10:10',
            'status' => 'Waiting',
            'user_dokter_id' => $this->userDoctor->id,
            'nama_dokter' => $this->userDoctor->name,
        ]);

        $response = $this->postJson(
            route('booking.store'),
            [
                'user_id' => $booking->user_id,
                'nama_user' => $booking->nama_user,
                'tanggal' => $booking->tanggal,
                'deskripsi' => $booking->deskripsi,
                'start_time' => $booking->start_time,
                'end_time' => $booking->end_time,
                'status' => $booking->status,
                'user_dokter_id' => $booking->user_dokter_id,
                'nama_dokter' => $booking->nama_dokter,
            ]
        )
            ->assertStatus(201)
            ->json();

        // dd($response);
        $this->assertEquals($this->userDoctor->id, $response['user_dokter_id']);
        $this->assertDatabaseHas('bookings', ['user_dokter_id' => $this->userDoctor->id]);
    }

    public function test_get_bookinglist()
    {
        Sanctum::actingAs(
            $this->userDoctor,
            ['*']
        );
        $response = $this->get('/api/bookinglist');
        $response->assertStatus(200);
    }
}
