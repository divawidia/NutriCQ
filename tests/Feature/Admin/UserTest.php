<?php

namespace Admin;

use App\Models\Goal;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Laravel\Sanctum\Sanctum;
use Spatie\Permission\Models\Role;
use Tests\TestCase;

class UserTest extends TestCase
{
    /**
     * A basic feature test example.
     *
     * @return void
     */
    use RefreshDatabase;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $roleAdmin = Role::create(['name' => 'admin']);
        $roleUser = Role::create(['name' => 'user']);

        $this->userAdmin = User::factory()->create();
        $this->userAdmin->assignRole($roleAdmin);

        $this->userUser = User::factory()->create();
        $this->userUser->assignRole($roleUser);

        Sanctum::actingAs($this->userAdmin, ['*']);
    }

    public function test_admin_can_list_users()
    {
        // Arrange: create some users
        User::factory()->count(10)->create();

        // Act: call the index endpoint
        $response = $this->getJson(route('admin.users.index'));

        // Assert
        $response->assertStatus(200)
            ->assertJson([
                'success' => true,
                'message' => 'Users data successfully retrieved',
            ])
            ->assertJsonStructure([
                'data',
                'pagination' => ['total', 'per_page', 'current_page', 'last_page']
            ]);
    }

    public function test_admin_fetch_one_of_doctor_data()
    {
        $response = $this->getJson(route('admin.doctorList', $this->userDoctor->id))
            ->assertOk();

        $this->assertEquals($response[0]['name'], $this->userDoctor->name);
    }

    public function test_admin_can_update_doctor_status()
    {
        $this->patchJson(route('admin.updateStatusDoctor', $this->userDoctor->id), ['status' => 'active'])
            ->assertOk();

        $this->assertDatabaseHas('users', ['status' => 'active']);
    }

    public function test_admin_cannot_update_user_data()
    {
        $this->patchJson(route('admin.updateStatusDoctor', $this->userUser->id), ['status' => 'active'])
            ->assertUnauthorized()
            ->assertJson(['message' => 'User is not doctor']);
    }

    public function test_user_update_profile()
    {
        Sanctum::actingAs(
            $this->userUser,
            ['*']
        );
        Goal::factory()->create(['user_id' => $this->userUser->id]);

        $response = $this->putJson(route('profile.update'), [
            'name' => 'user',
            'email' => 'user@user.com',
            'password' => 'user12345',
            'no_telp' => '0767575457474',
            'tgl_lahir' => '2001-02-02',
            'gender' => 'male',
            'tinggi_badan' => 170,
            'berat_badan' => 79,
            'tingkat_aktivitas' => 'sedentary'
        ])
            ->assertOk();

        $this->assertDatabaseHas('users', [
            'name' => 'user',
            'email' => 'user@user.com',
            'no_telp' => '0767575457474',
            'tgl_lahir' => '2001-02-02',
            'gender' => 'male',
            'tinggi_badan' => 170,
            'berat_badan' => 79,
            'tingkat_aktivitas' => 'sedentary'
        ]);

        //checking tdee calculation
        $this->assertDatabaseHas('goals', [
            'total_energi' => 2103,
            'total_protein' => 157.725,
            'total_karbohidrat' => 210.3,
            'total_lemak' => 70.1,
        ]);
    }
}
